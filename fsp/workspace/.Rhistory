rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
params = test_params,
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report.html")
)
##############################################################################################
#' @title TEST SCRIPT TO RENDER FSP QC REPORT
#' @author
#' Kate Murphy \email{kmurphy@battelleecology.org} \cr
#' @return HTML report for testing FSP QC script
# changelog and author contributions / copyrights
#   Kate Murphy (2025-01-XX)
#     original creation for FSP testing
##############################################################################################
# Load libraries
library(neonOSqc)
# Set local filepath to the FSP script directory
scriptDir <- "C:/Users/kmurphy/Documents/Git/os-data-quality-review/fsp/"
# For testing, we can run the Rmd directly with params
# This allows testing without the full render_qaqc_report function
# Set up params for testing
test_params <- list(
titleDate = "Test Run - 2024",
startMonth = "2024-01",
endMonth = "2024-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2024_20250101000000"
)
# Test rendering the FSP script
rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
params = test_params,
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report.html")
)
##############################################################################################
#' @title TEST SCRIPT TO RENDER FSP QC REPORT
#' @author
#' Kate Murphy \email{kmurphy@battelleecology.org} \cr
#' @return HTML report for testing FSP QC script
# changelog and author contributions / copyrights
#   Kate Murphy (2025-01-XX)
#     original creation for FSP testing
##############################################################################################
# Load libraries
library(neonOSqc)
# Set local filepath to the FSP script directory
scriptDir <- "C:/Users/kmurphy/Documents/Git/os-data-quality-review/fsp/"
# For testing, we can run the Rmd directly with params
# This allows testing without the full render_qaqc_report function
# Set up params for testing
test_params <- list(
titleDate = "Test Run - 2024",
startMonth = "2024-01",
endMonth = "2024-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2024_20250101000000"
)
# Test rendering the FSP script
rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
params = test_params,
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report.html")
)
##############################################################################################
#' @title TEST SCRIPT TO RENDER FSP QC REPORT
#' @author
#' Kate Murphy \email{kmurphy@battelleecology.org} \cr
#' @return HTML report for testing FSP QC script
# changelog and author contributions / copyrights
#   Kate Murphy (2025-01-XX)
#     original creation for FSP testing
##############################################################################################
# Load libraries
library(neonOSqc)
# Set local filepath to the FSP script directory
scriptDir <- "C:/Users/kmurphy/Documents/Git/os-data-quality-review/fsp/"
# For testing, we can run the Rmd directly with params
# This allows testing without the full render_qaqc_report function
# Set up params for testing
test_params <- list(
titleDate = "Test Run - 2024",
startMonth = "2024-01",
endMonth = "2024-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2024_20250101000000"
)
# Test rendering the FSP script
rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
params = test_params,
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report.html")
)
##############################################################################################
#' @title ALTERNATIVE TEST SCRIPT TO RENDER FSP QC REPORT
#' @author
#' Kate Murphy \email{kmurphy@battelleecology.org} \cr
#' @return HTML report for testing FSP QC script
# changelog and author contributions / copyrights
#   Kate Murphy (2025-01-XX)
#     original creation for FSP testing
##############################################################################################
# Load libraries
library(neonOSqc)
# Set local filepath to the FSP script directory
scriptDir <- "C:/Users/kmurphy/Documents/Git/os-data-quality-review/fsp/"
# Alternative approach: Create params in the environment first
params <- list(
titleDate = "Test Run - 2024",
startMonth = "2024-01",
endMonth = "2024-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2024_20250101000000"
)
# Test rendering the FSP script with params already in environment
rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report_v2.html")
)
print("FSP test report v2 rendered successfully!")
print("Check the output file: fsp_test_report_v2.html")
##############################################################################################
#' @title ALTERNATIVE TEST SCRIPT TO RENDER FSP QC REPORT
#' @author
#' Kate Murphy \email{kmurphy@battelleecology.org} \cr
#' @return HTML report for testing FSP QC script
# changelog and author contributions / copyrights
#   Kate Murphy (2025-01-XX)
#     original creation for FSP testing
##############################################################################################
# Load libraries
library(neonOSqc)
# Set local filepath to the FSP script directory
scriptDir <- "C:/Users/kmurphy/Documents/Git/os-data-quality-review/fsp/"
# Alternative approach: Create params in the environment first
params <- list(
titleDate = "Test Run - 2022",
startMonth = "2022-01",
endMonth = "2022-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2022_20250101000000"
)
# Test rendering the FSP script with params already in environment
rmarkdown::render(
input = paste0(scriptDir, "fsp_qaReview_render_v3.Rmd"),
output_format = "html_document",
output_file = paste0(scriptDir, "fsp_test_report_v2.html")
)
print("FSP test report v2 rendered successfully!")
print("Check the output file: fsp_test_report_v2.html")
# Manual script to run fsp_qaReview_render_v3.Rmd
# This uses the working approach: create params in environment first
# Set up params in environment first
params <- list(
titleDate = "Test Run - 2022",
startMonth = "2022-01",
endMonth = "2022-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2022_20250101000000"
)
# Print params to verify
cat("Using params:\n")
print(params)
cat("\n")
# Render the FSP QC report
cat("Rendering fsp_qaReview_render_v3.Rmd...\n")
rmarkdown::render(
"fsp_qaReview_render_v3.Rmd",
output_format = "html_document",
output_file = "fsp_manual_test_report.html"
)
cat("\nb FSP QC report rendered successfully!\n")
cat("Check the output file: fsp_manual_test_report.html\n")
# Manual script to run fsp_qaReview_render_v3.Rmd
# This uses the working approach: create params in environment first
# Set up params in environment first
params <- list(
titleDate = "Test Run - 2024",
startMonth = "2024-01",
endMonth = "2024-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2024_20250101000000"
)
# Print params to verify
cat("Using params:\n")
print(params)
cat("\n")
# Render the FSP QC report
cat("Rendering fsp_qaReview_render_v3.Rmd...\n")
rmarkdown::render(
"fsp_qaReview_render_v3.Rmd",
output_format = "html_document",
output_file = "fsp_manual_test_report.html"
)
cat("\nb FSP QC report rendered successfully!\n")
cat("Check the output file: fsp_manual_test_report.html\n")
# Manual script to run fsp_qaReview_render_v3.Rmd
# This uses the working approach: create params in environment first
# Set up params in environment first (same as working fsp_test_render_v2.R)
params <- list(
titleDate = "Test Run - 2022",
startMonth = "2022-01",
endMonth = "2022-12",
monthlyAnnual = "annual",
labData = FALSE,
customParams = TRUE,
reportTimestamp = "20250101000000",
reportName = "fsp_annual_2022_20250101000000"
)
# Print params to verify
cat("Using params:\n")
print(params)
cat("\n")
# Render the FSP QC report (same approach as working fsp_test_render_v2.R)
cat("Rendering fsp_qaReview_render_v3.Rmd...\n")
rmarkdown::render(
"fsp_qaReview_render_v3.Rmd",
output_format = "html_document",
output_file = "fsp_manual_test_report.html"
)
cat("\nb FSP QC report rendered successfully!\n")
cat("Check the output file: fsp_manual_test_report.html\n")
knitr::opts_chunk$set(eval = T, echo = F, message = F, cache = FALSE)
# Load CRAN packages
library(neonUtilities) # functions to download portal data
library(neonOS) # function for dup checking, recommend using the CRAN version
library(devtools)# functions for interacting with packages (if needed)
library(tidyverse) # these functions are used in the template to work with data frames
# Install packages from GitHub if not done or not updated in a while - else comment out
# Note that 'install_local' can also work, as long as repo is synced should be same outcome
# install_github('NEONScience/neonOSqc')
# install_github("NEONScience/restR2")
# Load internal NEON packages
library(neonOSqc) # OS QC functions
library(restR2) # if using restR2 calls directly
# Set options for DT:datatables
dtOptions = list(
paging = FALSE,
scrollX = TRUE,
scrollY = "42vh",
scrollCollapse = TRUE,
buttons = 'csv',
dom='B<"top"i>t',
columnDefs = list(
list(className = "dt-left", targets = "_all")
)
)
version$version.string
print(paste("neonOSqc version:", packageVersion("neonOSqc")))
# Set date variables from render file
startDate_checked <- params$startMonth
endDate_checked <- params$endMonth
print(paste0('First year-month of input data = ', startDate_checked, '. Last year-month of input data = ', endDate_checked, "."))
# Set script type from render file
scriptType <- params$monthlyAnnual
annual = ifelse(scriptType == "annual", T, F) # optional, if the 'annual' parameter is used to set chunks to run or not based on one month vs annual data pull
# What is the name and timestamp for the report? Need when outputs go to GCS
reportTimestamp <- params$reportTimestamp
reportName <- params$reportName
# Load portal data - CFC (for cross-reference completeness checks)
if(exists("canopyFoliage")){
print("Downloaded CFC data")
}else{
canopyFoliage <- restR2::get.os.l0.data(
dpID = "DP1.10026.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
}
# Load portal data - FSP (with fallback to L0)
spectra <- try(neonUtilities::loadByProduct(
dpID='DP1.30012.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = "all",
include.provisional = T,
release = "LATEST",
token = Sys.getenv('GITHUB_PAT'), # Using GITHUB_PAT instead of NEON_PAT
silent = T))
if(exists("spectra")){
print("Downloaded FSP data")
}else{
allFSPL0data <- restR2::get.os.l0.data(
dpID = "DP0.30012.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
}
# Set date variables from render file
startDate_checked <- params$startMonth
endDate_checked <- params$endMonth
print(paste0('First year-month of input data = ', startDate_checked, '. Last year-month of input data = ', endDate_checked, "."))
# Set script type from render file
scriptType <- params$monthlyAnnual
annual = ifelse(scriptType == "annual", T, F) # optional, if the 'annual' parameter is used to set chunks to run or not based on one month vs annual data pull
# What is the name and timestamp for the report? Need when outputs go to GCS
reportTimestamp <- params$reportTimestamp
reportName <- params$reportName
canopyFoliage <- restR2::get.os.l0.data(
dpID = "DP1.10026.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
spectra <- restR2::get.os.l0.data(
dpID = "DP0.30012.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
version$version.string
print(paste("neonOSqc version:", packageVersion("neonOSqc")))
# Load CRAN packages
library(neonUtilities) # functions to download portal data
library(neonOS) # function for dup checking, recommend using the CRAN version
library(devtools)# functions for interacting with packages (if needed)
library(tidyverse) # these functions are used in the template to work with data frames
# Install packages from GitHub if not done or not updated in a while - else comment out
# Note that 'install_local' can also work, as long as repo is synced should be same outcome
# install_github('NEONScience/neonOSqc')
# install_github("NEONScience/restR2")
# Load internal NEON packages
library(neonOSqc) # OS QC functions
library(restR2) # if using restR2 calls directly
# Set options for DT:datatables
dtOptions = list(
paging = FALSE,
scrollX = TRUE,
scrollY = "42vh",
scrollCollapse = TRUE,
buttons = 'csv',
dom='B<"top"i>t',
columnDefs = list(
list(className = "dt-left", targets = "_all")
)
)
# Set date variables for FSP QC report
startDate_checked <- "2022-01"  # Start date for data download
endDate_checked <- "2022-12"    # End date for data download
print(paste0('First year-month of input data = ', startDate_checked, '. Last year-month of input data = ', endDate_checked, "."))
# Set script type
scriptType <- "annual"
annual = TRUE # Set to TRUE for annual data pull
# What is the name and timestamp for the report? Need when outputs go to GCS
reportTimestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
reportName <- paste0("fsp_annual_", format(Sys.Date(), "%Y"), "_", reportTimestamp)
# Load portal data - CFC (for cross-reference completeness checks)
if(exists("canopyFoliage")){
print("Downloaded CFC data")
}else{
canopyFoliage <- restR2::get.os.l0.data(
dpID = "DP1.10026.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
}
# Load portal data - FSP (with fallback to L0)
spectra <- try(neonUtilities::loadByProduct(
dpID='DP1.30012.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = "all",
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'), # Using NEON_PAT token
silent = T))
if(exists("spectra")){
print("Downloaded FSP data")
}else{
allFSPL0data <- restR2::get.os.l0.data(
dpID = "DP0.30012.001",
stack = 'prod',
return_format = 'dataframe',
format_for_L0_editor = T)
}
# Set date variables for FSP QC report
startDate_checked <- "2022-01"  # Start date for data download
endDate_checked <- "2022-12"    # End date for data download
print(paste0('First year-month of input data = ', startDate_checked, '. Last year-month of input data = ', endDate_checked, "."))
# Set script type
scriptType <- "annual"
annual = TRUE # Set to TRUE for annual data pull
# What is the name and timestamp for the report? Need when outputs go to GCS
reportTimestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
reportName <- paste0("fsp_annual_", format(Sys.Date(), "%Y"), "_", reportTimestamp)
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = "all",
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'), # Using NEON_PAT token
silent = T))
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = c("STER", "GUAN"),
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'), # Using NEON_PAT token
silent = T))
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = c("STER", "GUAN"),
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'))
)
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = c("STER", "GUAN"),
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT')))
spectra <- try(neonUtilities::loadByProduct(
dpID='DP1.30012.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = "all",
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'), # Using NEON_PAT token
silent = T))
# Load CRAN packages
library(neonUtilities) # functions to download portal data
library(neonOS) # function for dup checking, recommend using the CRAN version
library(devtools)# functions for interacting with packages (if needed)
library(tidyverse) # these functions are used in the template to work with data frames
# Install packages from GitHub if not done or not updated in a while - else comment out
# Note that 'install_local' can also work, as long as repo is synced should be same outcome
# install_github('NEONScience/neonOSqc')
# install_github("NEONScience/restR2")
# Load internal NEON packages
library(neonOSqc) # OS QC functions
library(restR2) # if using restR2 calls directly
# Set options for DT:datatables
dtOptions = list(
paging = FALSE,
scrollX = TRUE,
scrollY = "42vh",
scrollCollapse = TRUE,
buttons = 'csv',
dom='B<"top"i>t',
columnDefs = list(
list(className = "dt-left", targets = "_all")
)
)
# Set date variables for FSP QC report
startDate_checked <- "2022-01"  # Start date for data download
endDate_checked <- "2022-12"    # End date for data download
print(paste0('First year-month of input data = ', startDate_checked, '. Last year-month of input data = ', endDate_checked, "."))
# Set script type
scriptType <- "annual"
annual = TRUE # Set to TRUE for annual data pull
# What is the name and timestamp for the report? Need when outputs go to GCS
reportTimestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
reportName <- paste0("fsp_annual_", format(Sys.Date(), "%Y"), "_", reportTimestamp)
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = c("STER", "GUAN"),
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT'), # Using NEON_PAT token
silent = T))
canopyFoliage <- try(neonUtilities::loadByProduct(
dpID='DP1.10026.001',
check.size=F,
startdate = startDate_checked,
enddate = endDate_checked,
site = c("STER", "GUAN"),
include.provisional = T,
release = "LATEST",
token = Sys.getenv('NEON_PAT')))
